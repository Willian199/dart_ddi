# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.
#
# The issues identified by the analyzer are surfaced in the UI of Dart-enabled
# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be
# invoked from the command line by running `flutter analyze`.

# The following line activates a set of recommended lints for Flutter apps,
# packages, and plugins designed to encourage good coding practices.
include: package:lints/recommended.yaml

analyzer:
  exclude: [build/**]
  language:
    #Strict-casts: Quando definido como true, esse lint irá sinalizar quando houver uma conversão explícita de tipo que pode ser evitada. Por exemplo, converter um int em um double quando o double é esperado. Quando definido como false, o lint não irá sinalizar essas conversões.
    strict-casts: true
    #Strict-inference: Quando definido como true, esse lint irá sinalizar quando a inferência de tipo é muito genérica, ou seja, quando o tipo inferido é dynamic. Quando definido como false, o lint não irá sinalizar esses casos.
    strict-inference: false
    #strict-raw-types: Quando definido como true, esse lint irá sinalizar o uso de tipos genéricos sem especificar os tipos dos argumentos. Por exemplo, usar List em vez de List<String>. Quando definido como false, o lint não irá sinalizar esses casos.
    strict-raw-types: true

  errors:
    unnecessary_await_in_return: error
    unnecessary_new: error
    empty_statements: error
    list_remove_unrelated_type: error
    await_only_futures: error
    dead_code: error
    no_duplicate_case_values: error
    iterable_contains_unrelated_type: error
    null_check_on_nullable_type_parameter: error
    unreachable_from_main: error
    always_declare_return_types: error
    dead_null_aware_expression: error
    deprecated_member_use_from_same_package: warning
    body_might_complete_normally_nullable: error
    body_might_complete_normally_catch_error: error
    async_keyword_used_as_identifier: error
    async_for_in_wrong_context: error
    avoid_annotating_with_dynamic: warning
    avoid_empty_else: error
    void_checks: error

linter:
  # The lint rules applied to this project can be customized in the
  # section below to disable rules from the `package:flutter_lints/flutter.yaml`
  # included above or to enable additional rules. A list of all available lints
  # and their documentation is published at
  # https://dart-lang.github.io/linter/lints/index.html.
  #
  # Instead of disabling a lint rule for the entire project in the
  # section below, it can also be suppressed for a single line of code
  # or a specific dart file by using the `// ignore: name_of_lint` and
  # `// ignore_for_file: name_of_lint` syntax on the line or in the file
  # producing the lint.

  rules:
    avoid_print: true
    sort_constructors_first: true
    avoid_shadowing_type_parameters: true
    always_put_required_named_parameters_first: true
    avoid_classes_with_only_static_members: false
    await_only_futures: true
    always_declare_return_types: true
    only_throw_errors: true
    avoid_type_to_string: true
    avoid_slow_async_io: true
    avoid_types_as_parameter_names: true
    avoid_web_libraries_in_flutter: true
    cancel_subscriptions: true
    close_sinks: true
    collection_methods_unrelated_type: true
    discarded_futures: false
    diagnostic_describe_all_properties: false
    empty_statements: true
    literal_only_boolean_expressions: true
    no_adjacent_strings_in_list: true
    no_duplicate_case_values: true
    prefer_void_to_null: true
    test_types_in_equals: true
    unnecessary_statements: true
    unrelated_type_equality_checks: true
    valid_regexps: true
    always_use_package_imports: true
    avoid_dynamic_calls: false
    avoid_empty_else: true
    always_put_control_body_on_new_line: true
    always_specify_types: false
    avoid_double_and_int_checks: true
    avoid_init_to_null: true
    avoid_redundant_argument_values: true
    avoid_returning_null_for_void: true
    avoid_unnecessary_containers: true
    camel_case_extensions: true
    camel_case_types: true
    constant_identifier_names: false
    control_flow_in_finally: true
    curly_braces_in_flow_control_structures: true
    empty_catches: true
    missing_whitespace_between_adjacent_strings: true
    prefer_if_null_operators: true
    prefer_interpolation_to_compose_strings: true
    prefer_is_empty: true
    prefer_is_not_empty: true
    prefer_mixin: true
    prefer_spread_collections: true
    unnecessary_new: true
    use_enums: true
    use_if_null_to_convert_nulls_to_bools: true
    use_late_for_private_fields_and_variables: true
    avoid_unused_constructor_parameters: true
    unnecessary_null_in_if_null_operators: true
    prefer_const_constructors: true
    prefer_const_constructors_in_immutables: true
    prefer_const_declarations: true
    avoid_field_initializers_in_const_classes: true
    prefer_final_locals: true
    unnecessary_await_in_return: true
    null_check_on_nullable_type_parameter: true
    prefer_final_fields: true
    sized_box_for_whitespace: true
    unreachable_from_main: true
    use_function_type_syntax_for_parameters: true
    void_checks: true
# Additional information about this file can be found at
# https://dart.dev/guides/language/analysis-options
